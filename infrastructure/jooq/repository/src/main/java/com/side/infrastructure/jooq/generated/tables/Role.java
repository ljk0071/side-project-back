/*
 * This file is generated by jOOQ.
 */
package com.side.infrastructure.jooq.generated.tables;

import java.time.Instant;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.side.infrastructure.jooq.generated.Keys;
import com.side.infrastructure.jooq.generated.TestDb;
import com.side.infrastructure.jooq.generated.tables.records.RoleRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Role extends TableImpl<RoleRecord> {

	/**
	 * The reference instance of <code>test_db.role</code>
	 */
	public static final Role ROLE = new Role();
	private static final long serialVersionUID = 1L;
	/**
	 * The column <code>test_db.role.id</code>. 역할 ID
	 */
	public final TableField<RoleRecord, String> ID = createField(DSL.name("id"),
		SQLDataType.VARCHAR(30).nullable(false), this, "역할 ID");
	/**
	 * The column <code>test_db.role.name</code>. 역할명
	 */
	public final TableField<RoleRecord, String> NAME = createField(DSL.name("name"),
		SQLDataType.VARCHAR(30).nullable(false), this, "역할명");
	/**
	 * The column <code>test_db.role.description</code>. 설명
	 */
	public final TableField<RoleRecord, String> DESCRIPTION = createField(DSL.name("description"),
		SQLDataType.VARCHAR(255), this, "설명");
	/**
	 * The column <code>test_db.role.created_at</code>. 생성일시
	 */
	public final TableField<RoleRecord, Instant> CREATED_AT = createField(DSL.name("created_at"),
		SQLDataType.LOCALDATETIME(0).nullable(false), this, "생성일시",
		new AutoConverter<LocalDateTime, Instant>(LocalDateTime.class, Instant.class));
	/**
	 * The column <code>test_db.role.created_by</code>. 생성자
	 */
	public final TableField<RoleRecord, Long> CREATED_BY = createField(DSL.name("created_by"),
		SQLDataType.BIGINT.nullable(false), this, "생성자");
	/**
	 * The column <code>test_db.role.modified_at</code>. 수정일시
	 */
	public final TableField<RoleRecord, Instant> MODIFIED_AT = createField(DSL.name("modified_at"),
		SQLDataType.LOCALDATETIME(0), this, "수정일시",
		new AutoConverter<LocalDateTime, Instant>(LocalDateTime.class, Instant.class));
	/**
	 * The column <code>test_db.role.modified_by</code>. 수정자
	 */
	public final TableField<RoleRecord, Long> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.BIGINT,
		this, "수정자");

	private Role(Name alias, Table<RoleRecord> aliased) {
		this(alias, aliased, (Field<?>[])null, null);
	}

	private Role(Name alias, Table<RoleRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>test_db.role</code> table reference
	 */
	public Role(String alias) {
		this(DSL.name(alias), ROLE);
	}

	/**
	 * Create an aliased <code>test_db.role</code> table reference
	 */
	public Role(Name alias) {
		this(alias, ROLE);
	}

	/**
	 * Create a <code>test_db.role</code> table reference
	 */
	public Role() {
		this(DSL.name("role"), null);
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RoleRecord> getRecordType() {
		return RoleRecord.class;
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : TestDb.TEST_DB;
	}

	@Override
	public UniqueKey<RoleRecord> getPrimaryKey() {
		return Keys.KEY_ROLE_PRIMARY;
	}

	@Override
	public Role as(String alias) {
		return new Role(DSL.name(alias), this);
	}

	@Override
	public Role as(Name alias) {
		return new Role(alias, this);
	}

	@Override
	public Role as(Table<?> alias) {
		return new Role(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Role rename(String name) {
		return new Role(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Role rename(Name name) {
		return new Role(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Role rename(Table<?> name) {
		return new Role(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role where(Condition condition) {
		return new Role(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Role where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Role where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Role where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Role where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
