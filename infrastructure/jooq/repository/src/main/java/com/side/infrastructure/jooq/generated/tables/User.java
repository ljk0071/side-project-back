/*
 * This file is generated by jOOQ.
 */
package com.side.infrastructure.jooq.generated.tables;

import java.time.Instant;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.side.domain.enums.UserStatus;
import com.side.infrastructure.jooq.generated.Keys;
import com.side.infrastructure.jooq.generated.TestDb;
import com.side.infrastructure.jooq.generated.enums.UserType;
import com.side.infrastructure.jooq.generated.tables.records.UserRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class User extends TableImpl<UserRecord> {

	/**
	 * The reference instance of <code>test_db.user</code>
	 */
	public static final User USER = new User();
	private static final long serialVersionUID = 1L;
	/**
	 * The column <code>test_db.user.unique_id</code>. 유저 고유 ID
	 */
	public final TableField<UserRecord, Long> UNIQUE_ID = createField(DSL.name("unique_id"),
		SQLDataType.BIGINT.nullable(false).identity(true), this, "유저 고유 ID");
	/**
	 * The column <code>test_db.user.user_id</code>. 유저 ID
	 */
	public final TableField<UserRecord, String> USER_ID = createField(DSL.name("user_id"),
		SQLDataType.VARCHAR(50).nullable(false), this, "유저 ID");
	/**
	 * The column <code>test_db.user.password</code>. 비밀번호
	 */
	public final TableField<UserRecord, String> PASSWORD = createField(DSL.name("password"),
		SQLDataType.VARCHAR(255).nullable(false), this, "비밀번호");
	/**
	 * The column <code>test_db.user.name</code>. 이름
	 */
	public final TableField<UserRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50), this,
		"이름");
	/**
	 * The column <code>test_db.user.phone_number</code>. 핸드폰번호
	 */
	public final TableField<UserRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"),
		SQLDataType.VARCHAR(15), this, "핸드폰번호");
	/**
	 * The column <code>test_db.user.email</code>. 이메일
	 */
	public final TableField<UserRecord, String> EMAIL = createField(DSL.name("email"),
		SQLDataType.VARCHAR(255).nullable(false), this, "이메일");
	/**
	 * The column <code>test_db.user.status</code>. 상태
	 */
	public final TableField<UserRecord, UserStatus> STATUS = createField(DSL.name("status"),
		SQLDataType.VARCHAR(7).nullable(false), this, "상태",
		new AutoConverter<String, UserStatus>(String.class, UserStatus.class));
	/**
	 * The column <code>test_db.user.type</code>. 타입
	 */
	public final TableField<UserRecord, UserType> TYPE = createField(DSL.name("type"),
		SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(UserType.class), this, "타입");
	/**
	 * The column <code>test_db.user.description</code>. 설명
	 */
	public final TableField<UserRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB,
		this, "설명");
	/**
	 * The column <code>test_db.user.created_at</code>. 생성일시
	 */
	public final TableField<UserRecord, Instant> CREATED_AT = createField(DSL.name("created_at"),
		SQLDataType.LOCALDATETIME(0).nullable(false), this, "생성일시",
		new AutoConverter<LocalDateTime, Instant>(LocalDateTime.class, Instant.class));
	/**
	 * The column <code>test_db.user.created_by</code>. 생성자
	 */
	public final TableField<UserRecord, Long> CREATED_BY = createField(DSL.name("created_by"),
		SQLDataType.BIGINT.nullable(false), this, "생성자");
	/**
	 * The column <code>test_db.user.modified_at</code>. 수정일시
	 */
	public final TableField<UserRecord, Instant> MODIFIED_AT = createField(DSL.name("modified_at"),
		SQLDataType.LOCALDATETIME(0), this, "수정일시",
		new AutoConverter<LocalDateTime, Instant>(LocalDateTime.class, Instant.class));
	/**
	 * The column <code>test_db.user.modified_by</code>. 수정자
	 */
	public final TableField<UserRecord, Long> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.BIGINT,
		this, "수정자");

	private User(Name alias, Table<UserRecord> aliased) {
		this(alias, aliased, (Field<?>[])null, null);
	}

	private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>test_db.user</code> table reference
	 */
	public User(String alias) {
		this(DSL.name(alias), USER);
	}

	/**
	 * Create an aliased <code>test_db.user</code> table reference
	 */
	public User(Name alias) {
		this(alias, USER);
	}

	/**
	 * Create a <code>test_db.user</code> table reference
	 */
	public User() {
		this(DSL.name("user"), null);
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UserRecord> getRecordType() {
		return UserRecord.class;
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : TestDb.TEST_DB;
	}

	@Override
	public Identity<UserRecord, Long> getIdentity() {
		return (Identity<UserRecord, Long>)super.getIdentity();
	}

	@Override
	public UniqueKey<UserRecord> getPrimaryKey() {
		return Keys.KEY_USER_PRIMARY;
	}

	@Override
	public User as(String alias) {
		return new User(DSL.name(alias), this);
	}

	@Override
	public User as(Name alias) {
		return new User(alias, this);
	}

	@Override
	public User as(Table<?> alias) {
		return new User(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public User rename(String name) {
		return new User(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public User rename(Name name) {
		return new User(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public User rename(Table<?> name) {
		return new User(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public User where(Condition condition) {
		return new User(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public User where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public User where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public User where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public User where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public User where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public User where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public User where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public User whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public User whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
