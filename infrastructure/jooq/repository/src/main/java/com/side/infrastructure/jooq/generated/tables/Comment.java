/*
 * This file is generated by jOOQ.
 */
package com.side.infrastructure.jooq.generated.tables;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.side.infrastructure.jooq.generated.Keys;
import com.side.infrastructure.jooq.generated.TestDb;
import com.side.infrastructure.jooq.generated.tables.records.CommentRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Comment extends TableImpl<CommentRecord> {

	/**
	 * The reference instance of <code>test_db.comment</code>
	 */
	public static final Comment COMMENT = new Comment();
	private static final long serialVersionUID = 1L;
	/**
	 * The column <code>test_db.comment.id</code>. 댓글 ID
	 */
	public final TableField<CommentRecord, Long> ID = createField(DSL.name("id"),
		SQLDataType.BIGINT.nullable(false).identity(true), this, "댓글 ID");
	/**
	 * The column <code>test_db.comment.contents</code>. 댓글 내용
	 */
	public final TableField<CommentRecord, String> CONTENTS = createField(DSL.name("contents"),
		SQLDataType.VARCHAR(500).nullable(false), this, "댓글 내용");
	/**
	 * The column <code>test_db.comment.board_id</code>. 게시판 ID
	 */
	public final TableField<CommentRecord, Long> BOARD_ID = createField(DSL.name("board_id"),
		SQLDataType.BIGINT.nullable(false), this, "게시판 ID");
	/**
	 * The column <code>test_db.comment.likes</code>. 좋아요 수
	 */
	public final TableField<CommentRecord, Long> LIKES = createField(DSL.name("likes"),
		SQLDataType.BIGINT.nullable(false), this, "좋아요 수");
	/**
	 * The column <code>test_db.comment.dislikes</code>. 싫어요 수
	 */
	public final TableField<CommentRecord, Long> DISLIKES = createField(DSL.name("dislikes"),
		SQLDataType.BIGINT.nullable(false), this, "싫어요 수");

	private Comment(Name alias, Table<CommentRecord> aliased) {
		this(alias, aliased, (Field<?>[])null, null);
	}

	private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>test_db.comment</code> table reference
	 */
	public Comment(String alias) {
		this(DSL.name(alias), COMMENT);
	}

	/**
	 * Create an aliased <code>test_db.comment</code> table reference
	 */
	public Comment(Name alias) {
		this(alias, COMMENT);
	}

	/**
	 * Create a <code>test_db.comment</code> table reference
	 */
	public Comment() {
		this(DSL.name("comment"), null);
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CommentRecord> getRecordType() {
		return CommentRecord.class;
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : TestDb.TEST_DB;
	}

	@Override
	public Identity<CommentRecord, Long> getIdentity() {
		return (Identity<CommentRecord, Long>)super.getIdentity();
	}

	@Override
	public UniqueKey<CommentRecord> getPrimaryKey() {
		return Keys.KEY_COMMENT_PRIMARY;
	}

	@Override
	public Comment as(String alias) {
		return new Comment(DSL.name(alias), this);
	}

	@Override
	public Comment as(Name alias) {
		return new Comment(alias, this);
	}

	@Override
	public Comment as(Table<?> alias) {
		return new Comment(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Comment rename(String name) {
		return new Comment(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Comment rename(Name name) {
		return new Comment(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Comment rename(Table<?> name) {
		return new Comment(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Comment where(Condition condition) {
		return new Comment(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Comment where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Comment where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Comment where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Comment where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Comment where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Comment where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Comment where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Comment whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Comment whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
