/*
 * This file is generated by jOOQ.
 */
package com.side.infrastructure.jooq.generated.tables;

import java.time.Instant;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.side.infrastructure.jooq.generated.Keys;
import com.side.infrastructure.jooq.generated.TestDb;
import com.side.infrastructure.jooq.generated.tables.records.NoticeRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Notice extends TableImpl<NoticeRecord> {

	/**
	 * The reference instance of <code>test_db.notice</code>
	 */
	public static final Notice NOTICE = new Notice();
	private static final long serialVersionUID = 1L;
	/**
	 * The column <code>test_db.notice.id</code>. 공지사항 ID
	 */
	public final TableField<NoticeRecord, Long> ID = createField(DSL.name("id"),
		SQLDataType.BIGINT.nullable(false).identity(true), this, "공지사항 ID");
	/**
	 * The column <code>test_db.notice.title</code>. 게시글 제목
	 */
	public final TableField<NoticeRecord, String> TITLE = createField(DSL.name("title"),
		SQLDataType.VARCHAR(255).nullable(false), this, "게시글 제목");
	/**
	 * The column <code>test_db.notice.contents</code>. 게시글 내용
	 */
	public final TableField<NoticeRecord, String> CONTENTS = createField(DSL.name("contents"),
		SQLDataType.CLOB.nullable(false), this, "게시글 내용");
	/**
	 * The column <code>test_db.notice.likes</code>. 좋아요 수
	 */
	public final TableField<NoticeRecord, Long> LIKES = createField(DSL.name("likes"),
		SQLDataType.BIGINT.nullable(false), this, "좋아요 수");
	/**
	 * The column <code>test_db.notice.dislikes</code>. 싫어요 수
	 */
	public final TableField<NoticeRecord, Long> DISLIKES = createField(DSL.name("dislikes"),
		SQLDataType.BIGINT.nullable(false), this, "싫어요 수");
	/**
	 * The column <code>test_db.notice.created_at</code>. 생성일시
	 */
	public final TableField<NoticeRecord, Instant> CREATED_AT = createField(DSL.name("created_at"),
		SQLDataType.LOCALDATETIME(0).nullable(false), this, "생성일시",
		new AutoConverter<LocalDateTime, Instant>(LocalDateTime.class, Instant.class));
	/**
	 * The column <code>test_db.notice.created_by</code>. 생성자
	 */
	public final TableField<NoticeRecord, Long> CREATED_BY = createField(DSL.name("created_by"),
		SQLDataType.BIGINT.nullable(false), this, "생성자");
	/**
	 * The column <code>test_db.notice.modified_at</code>. 수정일시
	 */
	public final TableField<NoticeRecord, Instant> MODIFIED_AT = createField(DSL.name("modified_at"),
		SQLDataType.LOCALDATETIME(0), this, "수정일시",
		new AutoConverter<LocalDateTime, Instant>(LocalDateTime.class, Instant.class));
	/**
	 * The column <code>test_db.notice.modified_by</code>. 수정자
	 */
	public final TableField<NoticeRecord, Long> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.BIGINT,
		this, "수정자");

	private Notice(Name alias, Table<NoticeRecord> aliased) {
		this(alias, aliased, (Field<?>[])null, null);
	}

	private Notice(Name alias, Table<NoticeRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>test_db.notice</code> table reference
	 */
	public Notice(String alias) {
		this(DSL.name(alias), NOTICE);
	}

	/**
	 * Create an aliased <code>test_db.notice</code> table reference
	 */
	public Notice(Name alias) {
		this(alias, NOTICE);
	}

	/**
	 * Create a <code>test_db.notice</code> table reference
	 */
	public Notice() {
		this(DSL.name("notice"), null);
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<NoticeRecord> getRecordType() {
		return NoticeRecord.class;
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : TestDb.TEST_DB;
	}

	@Override
	public Identity<NoticeRecord, Long> getIdentity() {
		return (Identity<NoticeRecord, Long>)super.getIdentity();
	}

	@Override
	public UniqueKey<NoticeRecord> getPrimaryKey() {
		return Keys.KEY_NOTICE_PRIMARY;
	}

	@Override
	public Notice as(String alias) {
		return new Notice(DSL.name(alias), this);
	}

	@Override
	public Notice as(Name alias) {
		return new Notice(alias, this);
	}

	@Override
	public Notice as(Table<?> alias) {
		return new Notice(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Notice rename(String name) {
		return new Notice(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Notice rename(Name name) {
		return new Notice(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Notice rename(Table<?> name) {
		return new Notice(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Notice where(Condition condition) {
		return new Notice(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Notice where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Notice where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Notice where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Notice where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Notice where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Notice where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Notice where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Notice whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Notice whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
