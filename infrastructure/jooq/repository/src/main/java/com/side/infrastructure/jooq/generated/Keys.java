/*
 * This file is generated by jOOQ.
 */
package com.side.infrastructure.jooq.generated;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import com.side.infrastructure.jooq.generated.tables.Comment;
import com.side.infrastructure.jooq.generated.tables.Notice;
import com.side.infrastructure.jooq.generated.tables.Role;
import com.side.infrastructure.jooq.generated.tables.RoleHierarchy;
import com.side.infrastructure.jooq.generated.tables.User;
import com.side.infrastructure.jooq.generated.tables.UserRole;
import com.side.infrastructure.jooq.generated.tables.records.CommentRecord;
import com.side.infrastructure.jooq.generated.tables.records.NoticeRecord;
import com.side.infrastructure.jooq.generated.tables.records.RoleHierarchyRecord;
import com.side.infrastructure.jooq.generated.tables.records.RoleRecord;
import com.side.infrastructure.jooq.generated.tables.records.UserRecord;
import com.side.infrastructure.jooq.generated.tables.records.UserRoleRecord;

/**
 * A class modelling foreign key relationships and constraints of tables in
 * test_db.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Keys {

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<CommentRecord> KEY_COMMENT_PRIMARY = Internal.createUniqueKey(Comment.COMMENT,
		DSL.name("KEY_comment_PRIMARY"), new TableField[] {Comment.COMMENT.ID}, true);
	public static final UniqueKey<NoticeRecord> KEY_NOTICE_PRIMARY = Internal.createUniqueKey(Notice.NOTICE,
		DSL.name("KEY_notice_PRIMARY"), new TableField[] {Notice.NOTICE.ID}, true);
	public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE,
		DSL.name("KEY_role_PRIMARY"), new TableField[] {Role.ROLE.ID}, true);
	public static final UniqueKey<RoleHierarchyRecord> KEY_ROLE_HIERARCHY_PRIMARY = Internal.createUniqueKey(
		RoleHierarchy.ROLE_HIERARCHY, DSL.name("KEY_role_hierarchy_PRIMARY"),
		new TableField[] {RoleHierarchy.ROLE_HIERARCHY.HIGHER_ROLE, RoleHierarchy.ROLE_HIERARCHY.LOWER_ROLE}, true);
	public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER,
		DSL.name("KEY_user_PRIMARY"), new TableField[] {User.USER.UNIQUE_ID}, true);
	public static final UniqueKey<UserRoleRecord> KEY_USER_ROLE_PRIMARY = Internal.createUniqueKey(UserRole.USER_ROLE,
		DSL.name("KEY_user_role_PRIMARY"),
		new TableField[] {UserRole.USER_ROLE.ROLE_ID, UserRole.USER_ROLE.USER_UNIQUE_ID}, true);
}
