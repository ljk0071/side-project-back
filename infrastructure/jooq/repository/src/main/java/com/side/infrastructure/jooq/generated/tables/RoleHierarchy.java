/*
 * This file is generated by jOOQ.
 */
package com.side.infrastructure.jooq.generated.tables;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.side.infrastructure.jooq.generated.Keys;
import com.side.infrastructure.jooq.generated.TestDb;
import com.side.infrastructure.jooq.generated.tables.records.RoleHierarchyRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class RoleHierarchy extends TableImpl<RoleHierarchyRecord> {

	/**
	 * The reference instance of <code>test_db.role_hierarchy</code>
	 */
	public static final RoleHierarchy ROLE_HIERARCHY = new RoleHierarchy();
	private static final long serialVersionUID = 1L;
	/**
	 * The column <code>test_db.role_hierarchy.higher_role</code>. 상위 역할
	 */
	public final TableField<RoleHierarchyRecord, String> HIGHER_ROLE = createField(DSL.name("higher_role"),
		SQLDataType.VARCHAR(30).nullable(false), this, "상위 역할");
	/**
	 * The column <code>test_db.role_hierarchy.lower_role</code>. 하위 역할
	 */
	public final TableField<RoleHierarchyRecord, String> LOWER_ROLE = createField(DSL.name("lower_role"),
		SQLDataType.VARCHAR(30).nullable(false), this, "하위 역할");

	private RoleHierarchy(Name alias, Table<RoleHierarchyRecord> aliased) {
		this(alias, aliased, (Field<?>[])null, null);
	}

	private RoleHierarchy(Name alias, Table<RoleHierarchyRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>test_db.role_hierarchy</code> table reference
	 */
	public RoleHierarchy(String alias) {
		this(DSL.name(alias), ROLE_HIERARCHY);
	}

	/**
	 * Create an aliased <code>test_db.role_hierarchy</code> table reference
	 */
	public RoleHierarchy(Name alias) {
		this(alias, ROLE_HIERARCHY);
	}

	/**
	 * Create a <code>test_db.role_hierarchy</code> table reference
	 */
	public RoleHierarchy() {
		this(DSL.name("role_hierarchy"), null);
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RoleHierarchyRecord> getRecordType() {
		return RoleHierarchyRecord.class;
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : TestDb.TEST_DB;
	}

	@Override
	public UniqueKey<RoleHierarchyRecord> getPrimaryKey() {
		return Keys.KEY_ROLE_HIERARCHY_PRIMARY;
	}

	@Override
	public RoleHierarchy as(String alias) {
		return new RoleHierarchy(DSL.name(alias), this);
	}

	@Override
	public RoleHierarchy as(Name alias) {
		return new RoleHierarchy(alias, this);
	}

	@Override
	public RoleHierarchy as(Table<?> alias) {
		return new RoleHierarchy(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public RoleHierarchy rename(String name) {
		return new RoleHierarchy(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public RoleHierarchy rename(Name name) {
		return new RoleHierarchy(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public RoleHierarchy rename(Table<?> name) {
		return new RoleHierarchy(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RoleHierarchy where(Condition condition) {
		return new RoleHierarchy(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RoleHierarchy where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RoleHierarchy where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RoleHierarchy where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RoleHierarchy where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RoleHierarchy where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RoleHierarchy where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RoleHierarchy where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RoleHierarchy whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RoleHierarchy whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
