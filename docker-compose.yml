services:
  #  spring-app:
  #    build:
  #      context: .
  #      dockerfile: Dockerfile
  #    container_name: spring-app
  #    restart: always
  #    ports:
  #      - "8080:8080"
  #    environment:
  #      - SPRING_PROFILES_ACTIVE=prod
  #    depends_on:
  #      mysql:
  #        condition: service_healthy
  #      valkey-1 :
  #        condition: service_started
  #    networks:
  #      - valkey-net

  mysql:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root_pw
      MYSQL_DATABASE: test_db
      MYSQL_USER: test_id
      MYSQL_PASSWORD: test_pw
    ports:
      - "3306:3306"
    volumes:
      - type: volume
        source: mysql-data
        target: /var/lib/mysql
      - type: bind
        source: ./docker/mysql-init
        target: /docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "test_id", "-ptest_pw" ]
      interval: 10s
      timeout: 5s
      retries: 5

  valkey-1:
    image: valkey/valkey:latest
    ports:
      - "6379:6379"      # client port
    environment:
      - REDISCLI_AUTH=test_pw
    command: >
      valkey-server
      --port 6379
      --appendonly yes
      --requirepass test_pw
      --masterauth test_pw
    healthcheck:
      test: [ "CMD", "valkey-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30
    volumes:
      - valkey1-data:/data

  valkey-role-hierarchy-init:
    image: valkey/valkey:latest
    depends_on:
      - valkey-1
    environment:
      - REDISCLI_AUTH=test_pw
    entrypoint: >
      bash -c "
      echo 'Waiting for Valkey to be available...' &&
      until valkey-cli -h valkey-1 ping | grep PONG; do sleep 1; done &&
      echo 'Running init script...' &&
      valkey-cli -h valkey-1 < /init/init_script.redis && 
      echo 'Initialization complete. Keeping container alive.' &&
      tail -f /dev/null
      "
    volumes:
      - ./docker/valkey:/init

  redis-insight:
    image: redislabs/redisinsight:latest
    volumes:
      - redis-insight-data:/data  # 볼륨 추가
    platform: linux/arm64
    ports:
      - "5540:5540"
    depends_on:
      - valkey-1

#  # Redis Exporter - Valkey 모니터링용
#  redis-exporter:
#    image: oliver006/redis_exporter
#    environment:
#      - REDIS_ADDR=valkey-1:6379
#      - REDIS_PASSWORD=test_pw
#    ports:
#      - "9121:9121"
#    networks:
#      - valkey-net
#    depends_on:
#      - valkey-1

#  # MySQL Exporter
#  mysql-exporter:
#    image: prom/mysqld-exporter
#    volumes:
#      - ./mysql-exporter-config/.my.cnf:/etc/mysqld-exporter/.my.cnf
#    command: --config.my-cnf=/etc/mysqld-exporter/.my.cnf
#    restart: unless-stopped
#    ports:
#      - "9104:9104"
#    networks:
#      - valkey-net
#    depends_on:
#      - mysql

#  # Prometheus 설정
#  prometheus:
#    image: prom/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#      - '--web.console.libraries=/etc/prometheus/console_libraries'
#      - '--web.console.templates=/etc/prometheus/consoles'
#      - '--web.enable-lifecycle'
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus-data:/prometheus
#    ports:
#      - "9090:9090"
#    networks:
#      - valkey-net
#    depends_on:
#      - mysql-exporter
#      - redis-exporter

#  # Grafana 설정
#  grafana:
#    image: grafana/grafana
#    environment:
##      - GF_SECURITY_ADMIN_USER=admin
##      - GF_SECURITY_ADMIN_PASSWORD=admin
##      - GF_USERS_ALLOW_SIGN_UP=false
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin  # 또는 Viewer, Editor
#      - GF_AUTH_DISABLE_LOGIN_FORM=true   # 선택사항: 로그인 폼 비활성화
#    volumes:
#      - ./grafana/provisioning:/etc/grafana/provisioning
#      - grafana-data:/var/lib/grafana
#    ports:
#      - "3000:3000"
#    networks:
#      - valkey-net
#    depends_on:
#      - loki
#      - prometheus
#
#  promtail:
#    image: grafana/promtail:latest
#    volumes:
#      - /var/log:/var/log
#      - /var/run/docker.sock:/var/run/docker.sock
#    command: -config.file=/etc/promtail/config.yml
#    configs:
#      - source: promtail_config
#        target: /etc/promtail/config.yml
#    depends_on:
#      - loki
#    networks:
#      - valkey-net
#
#  influxdb:
#    image: influxdb:1.8
#    ports:
#      - "8086:8086"
#    environment:
#      - INFLUXDB_DB=k6
#      - INFLUXDB_ADMIN_USER=admin
#      - INFLUXDB_ADMIN_PASSWORD=admin
#    volumes:
#      - influxdb-data:/var/lib/influxdb

#  k6:
#    image: grafana/k6
#    volumes:
#      - ./scripts:/scripts
#    environment:
#      - K6_OUT=influxdb=http://influxdb:8086/k6

#  loki:
#    image: grafana/loki:latest
#    ports:
#      - "3100:3100"
#    volumes:
#      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml
#    command: -config.file=/etc/loki/local-config.yaml
#    networks:
#      - valkey-net

volumes:
  mysql-data:
  valkey1-data:
  prometheus-data:
  grafana-data:
  redis-insight-data:
  influxdb-data:
  k6:

configs:
  promtail_config:
    content: |
      server:
        http_listen_port: 9080
      positions:
        filename: /tmp/positions.yaml
      clients:
        - url: http://loki:3100/loki/api/v1/push
      scrape_configs:
        - job_name: system
          static_configs:
            - targets:
                - localhost
              labels:
                job: varlogs
                __path__: /var/log/*.log